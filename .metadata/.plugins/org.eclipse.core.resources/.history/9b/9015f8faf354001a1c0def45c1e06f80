.cpu cortex-m0
.thumb
.syntax unified
.fpu softvfp

//============================================================================
// Q1: hello
//============================================================================
.global hello
hello:
	push {lr}
	ldr r0, =text1
	bl printf
	pop {pc}

//============================================================================
// Q2: add2
//============================================================================
.global add2
add2:
	push {r4-r7, lr}
	movs r0, r2// r2= a
	movs r4, r1// r4 = b
	movs r3, r1// r1 =b
	adds r3, r2// r3 = b + a
	ldr r0,=form1
	movs r1, r2
	movs r2, r4
	bl printf
	pop {r4-r7, pc}

//============================================================================
// Q3: add3
//============================================================================
.global add3
add3:
	push {r4-r7, lr}
	movs r3, r0 // a
	adds r3, r1 // a + b
	adds r3, r2 // a + b + c

	//movs r4, r3 // sum
	push {r3}
	movs r3, r2 // c
	movs r2, r1 // b
	movs r1, r0 // a
	ldr r0,=form2 // format

	bl printf
	pop {r3}
	pop {r4-r7, pc}
//============================================================================
// Q4: rotate6
//============================================================================
.global rotate6
rotate6:
	// idk if this works
	push {r4-r7, lr}
	//r0 = a
	//r1 = b
	//r2 = c
	//r3 = d
	//pop{r4} = e
	//pop{r5} = f
	//pop {r4}
	//pop {r5}

	if1:
	cmp r0, #0
	beq endif1
	then1:
	ldr r5, [sp, #20]
	ldr r4, [sp, #24]
	movs r6, r5
	movs r5, r4
	movs r4, r3
	movs r3, r2
	movs r2, r1
	movs r1, r0
	movs r0, r6
	push {r4-r5}
	bl rotate6
	add sp, #8
	pop {r4-r7, pc}
	endif1:

	ldr r5, [sp, #20]
	ldr r4, [sp, #24]
	subs r5, r4
	subs r5, r3
	subs r5, r2
	subs r5, r1
	subs r5, r0
	movs r0, r5
	pop {r4-r7, pc}
//============================================================================
// Q5: low_pattern
//============================================================================
.type compare, %function  // You knew you needed this line.  Of course you did!
compare:
        ldr  r0,[r0]
        ldr  r1,[r1]
        subs r0,r1
        bx lr

.global low_pattern
low_pattern:
	push {r4-r7, lr}

	pop {r4-r7, pc}
//============================================================================
// Q6: get_name
//============================================================================
.global get_name
get_name:
	push {r4-r7, lr}

	pop {r4-r7, pc}
//============================================================================
// Q7: random_sum
//============================================================================
.global random_sum
random_sum:
	push {r4-r7, lr}

	pop {r4-r7, pc}
//============================================================================
// Q8: fibn
//============================================================================
.global fibn
fibn:
	push {r4-r7, lr}

	pop {r4-r7, pc}
//============================================================================
// Q9: fun
//============================================================================
.global fun
fun:
	push {r4-r7, lr}

	pop {r4-r7, pc}
//============================================================================
// Q10: sick
//============================================================================
.global sick
sick:
	push {r4-r7, lr}

	pop {r4-r7, pc}


text1: .string "Hello, world. \n"
	   //.align 2
form1: .string "%d + %d = %d\n"
	   //.align 2
form2: .string "%d + %d + %d = %d\n"
	   //.align 2
