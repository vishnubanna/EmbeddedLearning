#include "stm32f0xx.h"
#include "stm32f0_discovery.h"
#include <stdint.h>
#include <stdio.h>

// These are function pointers.  They can be called like functions
// after you set them to point to other functions.
// e.g.  cmd = bitbang_cmd;
// They will be set by the stepX() subroutines to point to the new
// subroutines you write below.
void (*cmd)(char b) = 0;
void (*data)(char b) = 0;
void (*display1)(const char *) = 0;
void (*display2)(const char *) = 0;

int col = 0;
int8_t history[16] = {0};
int8_t lookup[16] = {1,4,7,0xe,2,5,8,0,3,6,9,0xf,0xa,0xb,0xc,0xd};
char char_lookup[16] = {'1','4','7','*','2','5','8','0','3','6','9','#','A','B','C','D'};
extern int count;

// Prototypes for subroutines in support.c
void generic_lcd_startup(void);
void countdown(void);
void step1(void);
void step2(void);
void step3(void);
void step4(void);
void step6(void);

// This array will be used with dma_display1() and dma_display2() to mix
// commands that set the cursor location at zero and 64 with characters.
//
uint16_t dispmem[34] = {
        0x080 + 0,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x080 + 64,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
};

//=========================================================================
// Subroutines for step 2.
//=========================================================================
void spi_cmd(char b) {
    // Your code goes here.
	while(SPI2 -> SR & SPI_SR_TXE == 0);
	// recast the register SPI -> DR
	// take the address of te regester and set it to be pointed to by an 8 bit int
	// dereference it ten assign it
	// why?
	// b/c SPI2 -> DR is
	//*(uint8_t *)&SPI2 -> DR = b;
	SPI2 -> DR = b;
	return;
}

void spi_data(char b) {
    // Your code goes here.
	while((SPI2 -> SR & SPI_SR_TXE) == 0);
	//*(uint8_t *)&SPI2 -> DR = b;
	//SPI2 -> DR |= 0x200;
	SPI2 -> DR = 0x200 + b;
	return;
}

void spi_init_lcd(void) {
    // first enable clock in RCC
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;

	// config pins 12 13 15 in GPIO B for alternate functions
	GPIOB -> MODER &= ~(3<<12*2);
	GPIOB -> MODER &= ~(3<<13*2);
	GPIOB -> MODER &= ~(3<<15*2);

	GPIOB -> MODER |= (2<<12*2);
	GPIOB -> MODER |= (2<<13*2);
	GPIOB -> MODER |= (2<<15*2);

	// config for alternate function SPI -> alternate function 0
	GPIOB -> AFR[2] &= ~(15<<7*4);
	GPIOB -> AFR[2] &= ~(15<<5*4);
	GPIOB -> AFR[2] &= ~(15<<4*4);

	// enable clock to SPI sub system
	RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;

	// config SPI for communication
	SPI2 -> CR1 |= SPI_CR1_MSTR|SPI_CR1_BR_2|SPI_CR1_BR_1|SPI_CR1_BR_0; // stm is master // baud rate is 48Mhz/256 = 187Khz
	SPI2 -> CR1 |= SPI_CR1_BIDIMODE|SPI_CR1_BIDIOE; // enable the device for spi bidirectional mode
													// enable the device Bidirectional output
													// i think this sets the device for half duplex mode meaning only 1 wire comunication
	//SPI2 -> CR1 &= ~SPI_CR1_CPOL; // clock idle is set to 0, 0 when idle
	//SPI2 -> CR1 &= ~SPI_CR1_CPHA; // clock phase :: is set to 0, first clock transistion is the data capture edge

	SPI2 -> CR2 = SPI_CR2_DS_0|SPI_CR2_DS_3|SPI_CR2_NSSP|SPI_CR2_SSOE; // spi data size is 10
														  	  	  	   // allow NSS pulsing. alows SPI to generate a pulse on NSS if STM is the master.
									 	 	 	 	 	  	  	  	   // when pulled low, communication can begin
                                                          	  	  	   // SSOE is set to 1 when STM is master
																	   // NSS is pulled low when data needs to be transfered

	SPI2 -> CR1 |= SPI_CR1_SPE; // enable spi as a whole
	generic_lcd_startup();

}

//===========================================================================
// Subroutines for step 3.
//===========================================================================

// Display a string on line 1 using DMA.
void dma_display1(const char *s) {
    // Your code goes here.
	int i = 0;
	const int size = 34;
	const int cmd1 = 0;
	const int cmd2 = 17;
	const uint16_t padding = 0x220;

	for (i = 1; i < size/2; i++){
		if (i == cmd1 || i == cmd2){
			i += 1;
		}

		if (s[i - 1] != '\0'){
			dispmem[i] = 0x200|s[i - 1];
		}
		else {
			dispmem[i] = padding;
		}
	}

	//initialize DMA
	//use dma1 channel 1
	//CxS = 0000 || 0011
	//destination is &SPI2 -> DR
	//number of data is 17, size of datas is 16bits
	RCC -> AHBENR |= RCC_AHBENR_DMA1EN; // enable clock to subsystem
	SPI2 -> CR2 = SPI_CR2_DS_0|SPI_CR2_DS_3|SPI_CR2_NSSP|SPI_CR2_SSOE|SPI_CR2_TXDMAEN;

	//set data counts
	DMA1_Channel5 -> CCR &= ~DMA_CCR_EN; //turn it off
	DMA1_Channel5 -> CMAR = (uint32_t)dispmem;//memory address cast as int 32
	DMA1_Channel5 -> CPAR = (uint32_t)(&(SPI2->DR));//memory address of peripheral cast to int 32
	DMA1_Channel5 -> CNDTR = size; // number of data
	DMA1_Channel5 -> CCR |= DMA_CCR_DIR; //read from memory and place in peripheral
	DMA1_Channel5 -> CCR |= DMA_CCR_MSIZE_0; //16 bit operation
	DMA1_Channel5 -> CCR |= DMA_CCR_PSIZE_0; //16 bit operation
	DMA1_Channel5 -> CCR |= DMA_CCR_MINC; //increment memory address as you read
	DMA1_Channel5 -> CCR &= ~DMA_CCR_PINC; //increment memory address as you read
	DMA1_Channel5 -> CCR &= ~DMA_CCR_MEM2MEM; //not mem2mem
	DMA1_Channel5 -> CCR &= ~(DMA_CCR_PL_0|DMA_CCR_PL_1);

	//enable DMA
	DMA1_Channel5 -> CCR |= DMA_CCR_EN;

	return;
}

//===========================================================================
// Subroutines for Step 4.
//===========================================================================

void dma_spi_init_lcd(void) {
    // Your code goes here.
	spi_init_lcd(); // init the lcd
	//initialize DMA
	//use dma1 channel 1
	//CxS = 0000 || 0011
	//destination is &SPI2 -> DR
	//number of data is 17, size of datas is 16bits
	RCC -> AHBENR |= RCC_AHBENR_DMA1EN; // enable clock to subsystem
	SPI2 -> CR2 = SPI_CR2_DS_0|SPI_CR2_DS_3|SPI_CR2_NSSP|SPI_CR2_SSOE|SPI_CR2_TXDMAEN;

	//set data counts
	DMA1_Channel5 -> CCR &= ~DMA_CCR_EN; //turn it off
	DMA1_Channel5 -> CMAR = (uint32_t)dispmem;//memory address cast as int 32
	DMA1_Channel5 -> CPAR = (uint32_t)(&(SPI2->DR));//memory address of peripheral cast to int 32
	DMA1_Channel5 -> CNDTR = 34; // number of data
	DMA1_Channel5 -> CCR |= DMA_CCR_DIR; //read from memory and place in peripheral
	DMA1_Channel5 -> CCR |= DMA_CCR_MSIZE_0; //16 bit operation
	DMA1_Channel5 -> CCR |= DMA_CCR_PSIZE_0; //16 bit operation
	DMA1_Channel5 -> CCR |= DMA_CCR_MINC; //increment memory address as you read
	DMA1_Channel5 -> CCR &= ~DMA_CCR_PINC; //increment memory address as you read
	DMA1_Channel5 -> CCR &= ~DMA_CCR_MEM2MEM; //not mem2mem
	DMA1_Channel5 -> CCR &= ~(DMA_CCR_PL_0|DMA_CCR_PL_1);
	DMA1_Channel5 -> CCR |= DMA_CCR_CIRC;

	//enable DMA
	DMA1_Channel5 -> CCR |= DMA_CCR_EN;
}

// Display a string on line 1 by copying a string into the
// memory region circularly moved into the display by DMA.
void circdma_display1(const char *s) {
    // Your code goes here.
	int i = 0;
	const uint16_t padding = 0x220;

	for (i = 1; i < 17; i++){
		if (i == 0){
			i += 1;
		}

		if (s[i - 1] != '\0'){
			dispmem[i] = 0x200|s[i - 1];
		}
		else {
			dispmem[i] = padding;
		}
	}

}

//===========================================================================
// Display a string on line 2 by copying a string into the
// memory region circularly moved into the display by DMA.
void circdma_display2(const char *s) {
    // Your code goes here.
	int i = 0;
	const uint16_t padding = 0x220;

	for (i = 18; i < 34; i++){
		if (i == 17){
			i += 1;
		}

		if (s[i - 18] != '\0'){
			dispmem[i] = 0x200|s[i - 18];
		}
		else {
			dispmem[i] = padding;
		}
	}
}

//===========================================================================
// Subroutines for Step 6.
//===========================================================================

void init_keypad() {
	/* Student code goes here */
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA -> MODER &= ~(3 << 0 * 2);
	GPIOA -> MODER &= ~(3 << 1 * 2);
	GPIOA -> MODER &= ~(3 << 2 * 2);
	GPIOA -> MODER &= ~(3 << 3 * 2);
	GPIOA -> MODER &= ~(3 << 4 * 2);
	GPIOA -> MODER &= ~(3 << 5 * 2);
	GPIOA -> MODER &= ~(3 << 6 * 2);
	GPIOA -> MODER &= ~(3 << 7 * 2);

	GPIOA -> MODER |= (1 << 0 * 2);
	GPIOA -> MODER |= (1 << 1 * 2);
	GPIOA -> MODER |= (1 << 2 * 2);
	GPIOA -> MODER |= (1 << 3 * 2);

	GPIOA -> PUPDR &= ~(3 << 4 * 2);
	GPIOA -> PUPDR &= ~(3 << 5 * 2);
	GPIOA -> PUPDR &= ~(3 << 6 * 2);
	GPIOA -> PUPDR &= ~(3 << 7 * 2);
	GPIOA -> PUPDR |= (2 << 4 * 2);
	GPIOA -> PUPDR |= (2 << 5 * 2);
	GPIOA -> PUPDR |= (2 << 6 * 2);
	GPIOA -> PUPDR |= (2 << 7 * 2);
	return;
}

void init_tim6(void) {
    // Your code goes here.
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
	TIM6 -> PSC = 140 - 1;
	TIM6 -> ARR = 100 - 1;
	TIM6 -> DIER |= TIM_DIER_UIE;
	NVIC -> ISER[0] |= (1 << 17);
	TIM6 -> CR1 |= TIM_CR1_CEN;
	return;
}

void TIM6_DAC_IRQHandler() {
    // Your code goes here.
	TIM6 -> SR &= ~TIM_SR_UIF;
	int row = (GPIOA -> IDR >> 4) & 0xf;
	int index = col << 2;
//	history[index] = history[index] << 1;
//	history[index] |= row & 0x1;

	for (int i = 0; i <= 3; i++){
		history[index + i] = history[index + i] << 1;
		history[index + i] |= (row >> i) & 0x1;
	}

	col = col + 1;
	if (col > 3){
		col = 0;
	}
	GPIOA -> ODR = 1 << col;
	return;
}


int main(void)
{
    //step1();
    //step2();
    step3();
    //step4();
    //step6();
}
