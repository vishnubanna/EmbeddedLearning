#include "stm32f0xx.h"
#include "stm32f0_discovery.h"
#include <stdint.h>
#include <stdio.h>

// These are function pointers.  They can be called like functions
// after you set them to point to other functions.
// e.g.  cmd = bitbang_cmd;
// They will be set by the stepX() subroutines to point to the new
// subroutines you write below.
void (*cmd)(char b) = 0;
void (*data)(char b) = 0;
void (*display1)(const char *) = 0;
void (*display2)(const char *) = 0;

int col = 0;
int8_t history[16] = {0};
int8_t lookup[16] = {1,4,7,0xe,2,5,8,0,3,6,9,0xf,0xa,0xb,0xc,0xd};
char char_lookup[16] = {'1','4','7','*','2','5','8','0','3','6','9','#','A','B','C','D'};
extern int count;

// Prototypes for subroutines in support.c
void generic_lcd_startup(void);
void countdown(void);
void step1(void);
void step2(void);
void step3(void);
void step4(void);
void step6(void);

// This array will be used with dma_display1() and dma_display2() to mix
// commands that set the cursor location at zero and 64 with characters.
//
uint16_t dispmem[34] = {
        0x080 + 0,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x080 + 64,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
        0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
};

//=========================================================================
// Subroutines for step 2.
//=========================================================================
void spi_cmd(char b) {
    // Your code goes here.
	while(!(SPI2 -> SR & SPI_SR_TXE));
}

void spi_data(char b) {
    // Your code goes here.
	while(!(SPI2 -> SR & SPI_SR_TXE));
}

void spi_init_lcd(void) {
    // Your code goes here.
}

//===========================================================================
// Subroutines for step 3.
//===========================================================================

// Display a string on line 1 using DMA.
void dma_display1(const char *s) {
    // Your code goes here.
}

//===========================================================================
// Subroutines for Step 4.
//===========================================================================

void dma_spi_init_lcd(void) {
    // Your code goes here.
}

// Display a string on line 1 by copying a string into the
// memory region circularly moved into the display by DMA.
void circdma_display1(const char *s) {
    // Your code goes here.
}

//===========================================================================
// Display a string on line 2 by copying a string into the
// memory region circularly moved into the display by DMA.
void circdma_display2(const char *s) {
    // Your code goes here.
}

//===========================================================================
// Subroutines for Step 6.
//===========================================================================
void init_keypad() {
	/* Student code goes here */
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA -> MODER &= ~(3 << 0 * 2);
	GPIOA -> MODER &= ~(3 << 1 * 2);
	GPIOA -> MODER &= ~(3 << 2 * 2);
	GPIOA -> MODER &= ~(3 << 3 * 2);
	GPIOA -> MODER &= ~(3 << 4 * 2);
	GPIOA -> MODER &= ~(3 << 5 * 2);
	GPIOA -> MODER &= ~(3 << 6 * 2);
	GPIOA -> MODER &= ~(3 << 7 * 2);

	GPIOA -> MODER |= (1 << 0 * 2);
	GPIOA -> MODER |= (1 << 1 * 2);
	GPIOA -> MODER |= (1 << 2 * 2);
	GPIOA -> MODER |= (1 << 3 * 2);

	GPIOA -> PUPDR &= ~(3 << 4 * 2);
	GPIOA -> PUPDR &= ~(3 << 5 * 2);
	GPIOA -> PUPDR &= ~(3 << 6 * 2);
	GPIOA -> PUPDR &= ~(3 << 7 * 2);
	GPIOA -> PUPDR |= (2 << 4 * 2);
	GPIOA -> PUPDR |= (2 << 5 * 2);
	GPIOA -> PUPDR |= (2 << 6 * 2);
	GPIOA -> PUPDR |= (2 << 7 * 2);
	return;
}

void init_tim6(void) {
    // Your code goes here.
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
	TIM6 -> PSC = 140 - 1;
	TIM6 -> ARR = 100 - 1;
	TIM6 -> DIER |= TIM_DIER_UIE;
	NVIC -> ISER[0] |= (1 << 17);
	TIM6 -> CR1 |= TIM_CR1_CEN;
	return;
}

void TIM6_DAC_IRQHandler() {
    // Your code goes here.
	TIM6 -> SR &= ~TIM_SR_UIF;
	int row = (GPIOA -> IDR >> 4) & 0xf;
	int index = col << 2;
//	history[index] = history[index] << 1;
//	history[index] |= row & 0x1;

	for (int i = 0; i <= 3; i++){
		history[index + i] = history[index + i] << 1;
		history[index + i] |= (row >> i) & 0x1;
	}

	col = col + 1;
	if (col > 3){
		col = 0;
	}
	GPIOA -> ODR = 1 << col;
	return;
}

int main(void)
{
    step1();
    //step2();
    //step3();
    //step4();
    //step6();
}
